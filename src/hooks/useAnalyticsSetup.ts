'use client';\n\nimport { useEffect, useCallback } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { \n  initializeAnalytics, \n  trackPageView, \n  trackAccessibilityEvent,\n  setAnalyticsConsent,\n  type AnalyticsConfig,\n  type ConsentData\n} from '../lib/analytics/privacyCompliantAnalytics';\nimport { setupPerformanceMonitoring } from '../lib/performance';\n\nexport interface AnalyticsSetupOptions {\n  measurementId?: string;\n  enableGA4?: boolean;\n  enableHotjar?: boolean;\n  enableMixpanel?: boolean;\n  autoTrackPageViews?: boolean;\n  autoTrackAccessibility?: boolean;\n  autoTrackPerformance?: boolean;\n  debug?: boolean;\n}\n\nexport const useAnalyticsSetup = (options: AnalyticsSetupOptions = {}) => {\n  const pathname = usePathname();\n\n  const {\n    measurementId = process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID,\n    enableGA4 = true,\n    enableHotjar = false,\n    enableMixpanel = false,\n    autoTrackPageViews = true,\n    autoTrackAccessibility = true,\n    autoTrackPerformance = true,\n    debug = process.env.NODE_ENV === 'development'\n  } = options;\n\n  // Initialize analytics with privacy-first configuration\n  useEffect(() => {\n    const config: AnalyticsConfig = {\n      measurementId,\n      enableGA4,\n      enableHotjar,\n      enableMixpanel,\n      respectDNT: true,\n      anonymizeIP: true,\n      cookieExpiration: 365,\n      debug\n    };\n\n    const analytics = initializeAnalytics(config);\n    \n    // Check for existing consent\n    const existingConsent = analytics.getConsent();\n    if (existingConsent?.analytics) {\n      analytics.initialize();\n    }\n\n    // Setup performance monitoring if enabled\n    if (autoTrackPerformance) {\n      setupPerformanceMonitoring();\n    }\n\n    // Setup accessibility event tracking\n    if (autoTrackAccessibility) {\n      setupAccessibilityTracking();\n    }\n\n  }, [measurementId, enableGA4, enableHotjar, enableMixpanel, debug, autoTrackAccessibility, autoTrackPerformance]);\n\n  // Track page views automatically\n  useEffect(() => {\n    if (autoTrackPageViews) {\n      trackPageView(pathname);\n    }\n  }, [pathname, autoTrackPageViews]);\n\n  // Setup accessibility event tracking\n  const setupAccessibilityTracking = useCallback(() => {\n    // Track focus management\n    let focusStartTime: number | null = null;\n    document.addEventListener('focusin', () => {\n      focusStartTime = performance.now();\n    });\n\n    document.addEventListener('focusout', () => {\n      if (focusStartTime) {\n        const focusDuration = performance.now() - focusStartTime;\n        trackAccessibilityEvent({\n          action: 'focus_duration',\n          category: 'accessibility',\n          value: Math.round(focusDuration)\n        });\n        focusStartTime = null;\n      }\n    });\n\n    // Track keyboard navigation\n    let usingKeyboard = false;\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Tab') {\n        if (!usingKeyboard) {\n          usingKeyboard = true;\n          trackAccessibilityEvent({\n            action: 'keyboard_navigation_start',\n            category: 'accessibility',\n            label: 'tab_key'\n          });\n        }\n      }\n    });\n\n    document.addEventListener('mousedown', () => {\n      if (usingKeyboard) {\n        usingKeyboard = false;\n        trackAccessibilityEvent({\n          action: 'keyboard_navigation_end',\n          category: 'accessibility',\n          label: 'mouse_used'\n        });\n      }\n    });\n\n    // Track screen reader interactions\n    const announcements = document.querySelectorAll('[aria-live]');\n    announcements.forEach(element => {\n      const observer = new MutationObserver(() => {\n        trackAccessibilityEvent({\n          action: 'screen_reader_announcement',\n          category: 'accessibility',\n          label: element.getAttribute('aria-live') || 'polite'\n        });\n      });\n      observer.observe(element, { childList: true, subtree: true });\n    });\n\n    // Track accessibility preference changes\n    if (window.matchMedia) {\n      // High contrast mode\n      const highContrastQuery = window.matchMedia('(prefers-contrast: high)');\n      highContrastQuery.addEventListener('change', (e) => {\n        trackAccessibilityEvent({\n          action: 'high_contrast_change',\n          category: 'accessibility',\n          label: e.matches ? 'enabled' : 'disabled'\n        });\n      });\n\n      // Reduced motion preference\n      const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n      reducedMotionQuery.addEventListener('change', (e) => {\n        trackAccessibilityEvent({\n          action: 'reduced_motion_change',\n          category: 'accessibility',\n          label: e.matches ? 'enabled' : 'disabled'\n        });\n      });\n\n      // Font size changes\n      let initialFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n      const resizeObserver = new ResizeObserver(() => {\n        const currentFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n        if (currentFontSize !== initialFontSize) {\n          trackAccessibilityEvent({\n            action: 'font_size_change',\n            category: 'accessibility',\n            value: Math.round((currentFontSize / initialFontSize) * 100)\n          });\n          initialFontSize = currentFontSize;\n        }\n      });\n      resizeObserver.observe(document.documentElement);\n    }\n\n  }, []);\n\n  // Consent management functions\n  const grantConsent = useCallback((consent: Partial<ConsentData>) => {\n    setAnalyticsConsent({\n      analytics: true,\n      marketing: false,\n      functional: true,\n      timestamp: Date.now(),\n      version: '1.0',\n      ...consent\n    });\n  }, []);\n\n  const revokeConsent = useCallback(() => {\n    setAnalyticsConsent({\n      analytics: false,\n      marketing: false,\n      functional: true,\n      timestamp: Date.now(),\n      version: '1.0'\n    });\n  }, []);\n\n  const grantAnalyticsConsent = useCallback(() => {\n    grantConsent({ analytics: true });\n  }, [grantConsent]);\n\n  const grantMarketingConsent = useCallback(() => {\n    grantConsent({ marketing: true });\n  }, [grantConsent]);\n\n  // Cookie banner helpers\n  const acceptAllCookies = useCallback(() => {\n    grantConsent({\n      analytics: true,\n      marketing: true,\n      functional: true\n    });\n  }, [grantConsent]);\n\n  const acceptEssentialOnly = useCallback(() => {\n    grantConsent({\n      analytics: false,\n      marketing: false,\n      functional: true\n    });\n  }, [grantConsent]);\n\n  return {\n    // Consent management\n    grantConsent,\n    revokeConsent,\n    grantAnalyticsConsent,\n    grantMarketingConsent,\n    acceptAllCookies,\n    acceptEssentialOnly,\n    \n    // Manual tracking functions\n    trackPageView: useCallback((path?: string, title?: string) => {\n      trackPageView(path, title);\n    }, []),\n    \n    trackAccessibilityEvent: useCallback((event: Parameters<typeof trackAccessibilityEvent>[0]) => {\n      trackAccessibilityEvent(event);\n    }, []),\n    \n    // Setup functions\n    setupAccessibilityTracking\n  };\n};\n\n// Higher-order component for automatic analytics setup\nexport const withAnalytics = <P extends object>(\n  Component: React.ComponentType<P>,\n  options?: AnalyticsSetupOptions\n) => {\n  return function AnalyticsWrappedComponent(props: P) {\n    useAnalyticsSetup(options);\n    return <Component {...props} />;\n  };\n};\n\n// Context for analytics throughout the app\nimport { createContext, useContext, ReactNode } from 'react';\n\ninterface AnalyticsContextValue {\n  grantConsent: (consent: Partial<ConsentData>) => void;\n  revokeConsent: () => void;\n  grantAnalyticsConsent: () => void;\n  grantMarketingConsent: () => void;\n  acceptAllCookies: () => void;\n  acceptEssentialOnly: () => void;\n  trackPageView: (path?: string, title?: string) => void;\n  trackAccessibilityEvent: (event: Parameters<typeof trackAccessibilityEvent>[0]) => void;\n}\n\nconst AnalyticsContext = createContext<AnalyticsContextValue | null>(null);\n\nexport const AnalyticsProvider: React.FC<{\n  children: ReactNode;\n  options?: AnalyticsSetupOptions;\n}> = ({ children, options }) => {\n  const analytics = useAnalyticsSetup(options);\n  \n  return (\n    <AnalyticsContext.Provider value={analytics}>\n      {children}\n    </AnalyticsContext.Provider>\n  );\n};\n\nexport const useAnalyticsContext = () => {\n  const context = useContext(AnalyticsContext);\n  if (!context) {\n    throw new Error('useAnalyticsContext must be used within an AnalyticsProvider');\n  }\n  return context;\n};"