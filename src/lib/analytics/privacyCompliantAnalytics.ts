'use client';\n\n// Privacy-compliant analytics with accessibility tracking\n\nexport interface AnalyticsConfig {\n  measurementId?: string;\n  enableGA4?: boolean;\n  enableHotjar?: boolean;\n  enableMixpanel?: boolean;\n  respectDNT?: boolean;\n  anonymizeIP?: boolean;\n  cookieExpiration?: number;\n  debug?: boolean;\n}\n\nexport interface ConsentData {\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  timestamp: number;\n  version: string;\n}\n\nexport interface AccessibilityEvent {\n  action: string;\n  category: 'accessibility';\n  label?: string;\n  value?: number;\n  screen_reader_active?: boolean;\n  keyboard_navigation?: boolean;\n  high_contrast_mode?: boolean;\n  reduced_motion?: boolean;\n  font_size_increased?: boolean;\n}\n\nexport interface UserJourneyEvent {\n  event_name: string;\n  event_category: string;\n  page_title?: string;\n  page_location?: string;\n  user_agent?: string;\n  screen_resolution?: string;\n  viewport_size?: string;\n  connection_type?: string;\n  language?: string;\n  timezone?: string;\n  session_id?: string;\n  user_id?: string;\n  timestamp?: number;\n}\n\nexport class PrivacyCompliantAnalytics {\n  private config: AnalyticsConfig;\n  private consent: ConsentData | null = null;\n  private sessionId: string;\n  private isInitialized = false;\n  private eventQueue: any[] = [];\n  private accessibilityFeatures = {\n    screenReaderActive: false,\n    keyboardNavigation: false,\n    highContrastMode: false,\n    reducedMotion: false,\n    fontSizeIncreased: false\n  };\n\n  constructor(config: AnalyticsConfig) {\n    this.config = {\n      respectDNT: true,\n      anonymizeIP: true,\n      cookieExpiration: 365,\n      debug: false,\n      ...config\n    };\n    \n    this.sessionId = this.generateSessionId();\n    this.loadConsent();\n    this.detectAccessibilityFeatures();\n  }\n\n  // Initialize analytics with privacy checks\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    // Check Do Not Track header\n    if (this.config.respectDNT && this.isDNTEnabled()) {\n      console.log('Analytics disabled - DNT header detected');\n      return;\n    }\n\n    // Check user consent\n    if (!this.hasAnalyticsConsent()) {\n      console.log('Analytics disabled - user has not consented');\n      return;\n    }\n\n    // Initialize GA4 if enabled\n    if (this.config.enableGA4 && this.config.measurementId) {\n      await this.initializeGA4();\n    }\n\n    // Initialize other analytics services\n    if (this.config.enableHotjar && this.consent?.analytics) {\n      this.initializeHotjar();\n    }\n\n    if (this.config.enableMixpanel && this.consent?.analytics) {\n      this.initializeMixpanel();\n    }\n\n    this.isInitialized = true;\n    this.processEventQueue();\n    \n    // Track accessibility features usage\n    this.trackAccessibilityFeatures();\n  }\n\n  // Initialize Google Analytics 4 with privacy settings\n  private async initializeGA4(): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    // Load gtag script\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = `https://www.googletagmanager.com/gtag/js?id=${this.config.measurementId}`;\n    document.head.appendChild(script);\n\n    // Initialize gtag\n    (window as any).dataLayer = (window as any).dataLayer || [];\n    const gtag = (...args: any[]) => {\n      (window as any).dataLayer.push(args);\n    };\n    (window as any).gtag = gtag;\n\n    gtag('js', new Date());\n    gtag('config', this.config.measurementId, {\n      anonymize_ip: this.config.anonymizeIP,\n      allow_google_signals: false,\n      allow_ad_personalization_signals: false,\n      cookie_flags: 'SameSite=Strict;Secure',\n      cookie_expires: this.config.cookieExpiration * 24 * 60 * 60,\n      respect_dnt: this.config.respectDNT,\n      send_page_view: false // We'll send manually with accessibility context\n    });\n\n    if (this.config.debug) {\n      console.log('GA4 initialized with privacy settings');\n    }\n  }\n\n  // Initialize Hotjar with privacy settings\n  private initializeHotjar(): void {\n    // Hotjar implementation would go here\n    // Only initialize if user has consented to analytics\n  }\n\n  // Initialize Mixpanel with privacy settings\n  private initializeMixpanel(): void {\n    // Mixpanel implementation would go here\n    // Only initialize if user has consented to analytics\n  }\n\n  // Detect accessibility features in use\n  private detectAccessibilityFeatures(): void {\n    if (typeof window === 'undefined') return;\n\n    // Screen reader detection\n    this.accessibilityFeatures.screenReaderActive = \n      'speechSynthesis' in window || \n      navigator.userAgent.includes('NVDA') ||\n      navigator.userAgent.includes('JAWS') ||\n      navigator.userAgent.includes('VoiceOver');\n\n    // High contrast mode detection\n    if (window.matchMedia) {\n      this.accessibilityFeatures.highContrastMode = \n        window.matchMedia('(prefers-contrast: high)').matches ||\n        window.matchMedia('(-ms-high-contrast: active)').matches;\n\n      // Reduced motion detection\n      this.accessibilityFeatures.reducedMotion = \n        window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    }\n\n    // Font size increase detection\n    const rootFontSize = window.getComputedStyle(document.documentElement).fontSize;\n    this.accessibilityFeatures.fontSizeIncreased = \n      parseFloat(rootFontSize) > 16;\n\n    // Keyboard navigation detection\n    let keyboardUsed = false;\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Tab' || e.key === 'Enter' || e.key === ' ') {\n        keyboardUsed = true;\n        this.accessibilityFeatures.keyboardNavigation = true;\n      }\n    });\n\n    // Mouse usage resets keyboard detection\n    document.addEventListener('mousedown', () => {\n      if (keyboardUsed) {\n        keyboardUsed = false;\n      }\n    });\n  }\n\n  // Track accessibility features usage\n  private trackAccessibilityFeatures(): void {\n    const features = this.accessibilityFeatures;\n    \n    if (features.screenReaderActive) {\n      this.trackAccessibilityEvent({\n        action: 'screen_reader_detected',\n        category: 'accessibility',\n        label: 'active'\n      });\n    }\n\n    if (features.highContrastMode) {\n      this.trackAccessibilityEvent({\n        action: 'high_contrast_mode',\n        category: 'accessibility',\n        label: 'enabled'\n      });\n    }\n\n    if (features.reducedMotion) {\n      this.trackAccessibilityEvent({\n        action: 'reduced_motion',\n        category: 'accessibility',\n        label: 'enabled'\n      });\n    }\n\n    if (features.fontSizeIncreased) {\n      this.trackAccessibilityEvent({\n        action: 'font_size_increased',\n        category: 'accessibility',\n        label: 'detected'\n      });\n    }\n  }\n\n  // Track accessibility-specific events\n  public trackAccessibilityEvent(event: AccessibilityEvent): void {\n    const enhancedEvent = {\n      ...event,\n      ...this.accessibilityFeatures,\n      timestamp: Date.now(),\n      session_id: this.sessionId\n    };\n\n    if (!this.isInitialized) {\n      this.eventQueue.push(['accessibility_event', enhancedEvent]);\n      return;\n    }\n\n    if (this.hasAnalyticsConsent() && typeof window !== 'undefined' && 'gtag' in window) {\n      (window as any).gtag('event', event.action, {\n        event_category: event.category,\n        event_label: event.label,\n        value: event.value,\n        custom_parameters: {\n          screen_reader_active: this.accessibilityFeatures.screenReaderActive,\n          keyboard_navigation: this.accessibilityFeatures.keyboardNavigation,\n          high_contrast_mode: this.accessibilityFeatures.highContrastMode,\n          reduced_motion: this.accessibilityFeatures.reducedMotion,\n          font_size_increased: this.accessibilityFeatures.fontSizeIncreased\n        }\n      });\n    }\n\n    if (this.config.debug) {\n      console.log('Accessibility event tracked:', enhancedEvent);\n    }\n  }\n\n  // Track comprehensive user journey with accessibility context\n  public trackUserJourney(event: UserJourneyEvent): void {\n    if (!this.hasAnalyticsConsent()) return;\n\n    const enhancedEvent: UserJourneyEvent = {\n      ...event,\n      page_title: document.title,\n      page_location: window.location.href,\n      user_agent: navigator.userAgent,\n      screen_resolution: `${screen.width}x${screen.height}`,\n      viewport_size: `${window.innerWidth}x${window.innerHeight}`,\n      language: navigator.language,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      session_id: this.sessionId,\n      timestamp: Date.now()\n    };\n\n    // Add connection type if available\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      enhancedEvent.connection_type = connection.effectiveType || connection.type;\n    }\n\n    if (!this.isInitialized) {\n      this.eventQueue.push(['user_journey', enhancedEvent]);\n      return;\n    }\n\n    if (typeof window !== 'undefined' && 'gtag' in window) {\n      (window as any).gtag('event', event.event_name, {\n        event_category: event.event_category,\n        page_title: enhancedEvent.page_title,\n        page_location: enhancedEvent.page_location,\n        session_id: this.sessionId,\n        accessibility_context: {\n          screen_reader_active: this.accessibilityFeatures.screenReaderActive,\n          keyboard_navigation: this.accessibilityFeatures.keyboardNavigation,\n          high_contrast_mode: this.accessibilityFeatures.highContrastMode,\n          reduced_motion: this.accessibilityFeatures.reducedMotion\n        }\n      });\n    }\n\n    if (this.config.debug) {\n      console.log('User journey event tracked:', enhancedEvent);\n    }\n  }\n\n  // Track page view with accessibility context\n  public trackPageView(path?: string, title?: string): void {\n    if (!this.hasAnalyticsConsent()) return;\n\n    const pageData = {\n      page_path: path || window.location.pathname,\n      page_title: title || document.title,\n      page_location: window.location.href,\n      accessibility_features: this.accessibilityFeatures,\n      session_id: this.sessionId\n    };\n\n    if (!this.isInitialized) {\n      this.eventQueue.push(['page_view', pageData]);\n      return;\n    }\n\n    if (typeof window !== 'undefined' && 'gtag' in window) {\n      (window as any).gtag('event', 'page_view', pageData);\n    }\n\n    if (this.config.debug) {\n      console.log('Page view tracked:', pageData);\n    }\n  }\n\n  // Consent management\n  public setConsent(consent: Partial<ConsentData>): void {\n    this.consent = {\n      analytics: false,\n      marketing: false,\n      functional: true,\n      timestamp: Date.now(),\n      version: '1.0',\n      ...this.consent,\n      ...consent\n    };\n\n    this.saveConsent();\n\n    // Initialize or disable analytics based on consent\n    if (consent.analytics && !this.isInitialized) {\n      this.initialize();\n    } else if (!consent.analytics && this.isInitialized) {\n      this.disable();\n    }\n  }\n\n  public getConsent(): ConsentData | null {\n    return this.consent;\n  }\n\n  public hasAnalyticsConsent(): boolean {\n    return this.consent?.analytics === true;\n  }\n\n  // Privacy utilities\n  private isDNTEnabled(): boolean {\n    return navigator.doNotTrack === '1' || \n           (window as any).doNotTrack === '1' || \n           navigator.msDoNotTrack === '1';\n  }\n\n  private generateSessionId(): string {\n    return 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  }\n\n  private saveConsent(): void {\n    if (this.consent) {\n      localStorage.setItem('analytics_consent', JSON.stringify(this.consent));\n    }\n  }\n\n  private loadConsent(): void {\n    const stored = localStorage.getItem('analytics_consent');\n    if (stored) {\n      try {\n        this.consent = JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse stored consent:', e);\n      }\n    }\n  }\n\n  private processEventQueue(): void {\n    while (this.eventQueue.length > 0) {\n      const [type, data] = this.eventQueue.shift();\n      \n      switch (type) {\n        case 'page_view':\n          this.trackPageView(data.page_path, data.page_title);\n          break;\n        case 'user_journey':\n          this.trackUserJourney(data);\n          break;\n        case 'accessibility_event':\n          this.trackAccessibilityEvent(data);\n          break;\n      }\n    }\n  }\n\n  // Disable analytics\n  public disable(): void {\n    if (typeof window !== 'undefined' && 'gtag' in window) {\n      (window as any).gtag('consent', 'update', {\n        analytics_storage: 'denied',\n        ad_storage: 'denied'\n      });\n    }\n    \n    this.isInitialized = false;\n    this.eventQueue = [];\n  }\n\n  // Get analytics data (for debugging)\n  public getAnalyticsData(): any {\n    return {\n      config: this.config,\n      consent: this.consent,\n      sessionId: this.sessionId,\n      isInitialized: this.isInitialized,\n      accessibilityFeatures: this.accessibilityFeatures,\n      queueLength: this.eventQueue.length\n    };\n  }\n}\n\n// Global analytics instance\nlet analyticsInstance: PrivacyCompliantAnalytics | null = null;\n\n// Initialize analytics with default config\nexport const initializeAnalytics = (config: AnalyticsConfig): PrivacyCompliantAnalytics => {\n  if (!analyticsInstance) {\n    analyticsInstance = new PrivacyCompliantAnalytics(config);\n  }\n  return analyticsInstance;\n};\n\n// Get analytics instance\nexport const getAnalytics = (): PrivacyCompliantAnalytics | null => {\n  return analyticsInstance;\n};\n\n// Convenience functions\nexport const trackAccessibilityEvent = (event: AccessibilityEvent): void => {\n  analyticsInstance?.trackAccessibilityEvent(event);\n};\n\nexport const trackUserJourney = (event: UserJourneyEvent): void => {\n  analyticsInstance?.trackUserJourney(event);\n};\n\nexport const trackPageView = (path?: string, title?: string): void => {\n  analyticsInstance?.trackPageView(path, title);\n};\n\nexport const setAnalyticsConsent = (consent: Partial<ConsentData>): void => {\n  analyticsInstance?.setConsent(consent);\n};\n\nexport const hasAnalyticsConsent = (): boolean => {\n  return analyticsInstance?.hasAnalyticsConsent() ?? false;\n};\n\n// Hook for React components\nexport const useAnalytics = () => {\n  return {\n    trackAccessibilityEvent,\n    trackUserJourney,\n    trackPageView,\n    setConsent: setAnalyticsConsent,\n    hasConsent: hasAnalyticsConsent,\n    getAnalytics\n  };\n};\n\n// Enhanced tracking for specific events\nexport const trackFormSubmission = (formName: string, success: boolean, errors?: string[]) => {\n  trackUserJourney({\n    event_name: 'form_submission',\n    event_category: 'engagement',\n    form_name: formName,\n    success,\n    errors: errors?.join(', '),\n    accessibility_features: analyticsInstance?.getAnalyticsData().accessibilityFeatures\n  } as any);\n};\n\nexport const trackCTAClick = (ctaId: string, ctaText: string, location: string) => {\n  trackUserJourney({\n    event_name: 'cta_click',\n    event_category: 'engagement',\n    cta_id: ctaId,\n    cta_text: ctaText,\n    location\n  } as any);\n};\n\nexport const trackSearchQuery = (query: string, resultsCount: number, category?: string) => {\n  trackUserJourney({\n    event_name: 'search',\n    event_category: 'engagement',\n    search_term: query,\n    results_count: resultsCount,\n    category\n  } as any);\n};\n\nexport const trackQuoteRequest = (serviceType: string, origin: string, destination: string) => {\n  trackUserJourney({\n    event_name: 'quote_request',\n    event_category: 'conversion',\n    service_type: serviceType,\n    origin,\n    destination\n  } as any);\n};\n\nexport const trackUserEngagement = (engagementType: string, duration?: number, depth?: number) => {\n  trackUserJourney({\n    event_name: 'user_engagement',\n    event_category: 'engagement',\n    engagement_type: engagementType,\n    duration,\n    depth\n  } as any);\n};"